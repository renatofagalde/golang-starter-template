AWSTemplateFormatVersion: '2010-09-09'
Description: GolangStaterTemplate-Notes

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prd
    Description: Deployment environment
  ProjectName:
    Type: String
    Default: golang-starter-template
    Description: Starter project for others micro-services
  DBUser:
    Type: String
    Default: user
    Description: Database username
    NoEcho: false
  DBPassword:
    Type: String
    Default: pass
    Description: Database password
    NoEcho: true
  DBHost:
    Type: String
    Default: postgres-note
    Description: Database host
  DBPort:
    Type: String
    Default: 5432
    Description: Database port
  DBName:
    Type: String
    Default: note
    Description: Database name
  TokenSymmetricKey:
    Type: String
    Default: 12345678901234567890123456789012
    Description: Symmetric key for token generation
    NoEcho: true
  NewsKeyAPI:
    Type: String
    Default: 12345678901234567890123456789012
    Description: key to get news
    NoEcho: true

Resources:
  GolangStaterTemplate-Notes:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-${Environment}"
      Runtime: provided.al2023
      Handler: bootstrap
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: YOUR_DEPLOYMENT_BUCKET_NAME
        S3Key: YOUR_ZIP_FILE_PATH
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          LOG_LEVEL: info
          # Database connection string - replace with your actual values or use SSM parameters
          DB_DRIVER: postgresql
          DB_SOURCE: !Sub "postgresql://${DBUser}:${DBPassword}@${DBHost}:${DBPort}/${DBName}"
          # Add other environment variables your application needs
          SERVER_ADDRESS: "0.0.0.0:8080"
          TOKEN_SYMMETRIC_KEY: !Ref TokenSymmetricKey
          ACCESS_TOKEN_DURATION: "8h"
          NEWS_API_KEY: !Sub ${NewsKeyAPI}
      Tags:
        - Key: Service
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaRDSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds:DescribeDBInstances
                  - secretsmanager:GetSecretValue
                Resource: '*'

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GolangStaterTemplate-Notes}"
      RetentionInDays: 14

Outputs:
  LambdaFunction:
    Description: "Lambda Function ARN"
    Value: !GetAtt GolangStaterTemplate-Notes.Arn
  LambdaFunctionName:
    Description: "Lambda Function Name"
    Value: !Ref GolangStaterTemplate-Notes
  LambdaRegion:
    Description: "Region where the Lambda is deployed"
    Value: !Ref AWS::Region